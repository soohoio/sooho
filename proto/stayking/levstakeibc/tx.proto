syntax = "proto3";
package stayking.levstakeibc;

option go_package = "github.com/soohoio/stayking/v2/x/levstakeibc/types";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

service Msg {
  rpc RegisterHostZone(MsgRegisterHostZone)
      returns (MsgRegisterHostZoneResponse);
  rpc LeverageStake(MsgLeverageStake)
      returns (MsgLeverageStakeResponse);
}

message MsgRegisterHostZone {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string connection_id = 1 [ (gogoproto.moretags) = "yaml:\"connection_id\"" ];
  string bech32prefix = 2;
  string host_denom = 3 [ (gogoproto.moretags) = "yaml:\"host_denom\"" ];
  string ibc_denom = 4 [ (gogoproto.moretags) = "yaml:\"ibc_denom\"" ];
  string creator = 5;
  string transfer_channel_id = 6
      [ (gogoproto.moretags) = "yaml:\"transfer_channel_id\"" ];
  uint64 unbonding_frequency = 7
      [ (gogoproto.moretags) = "yaml:\"unbonding_frequency\"" ];
}

message MsgRegisterHostZoneResponse {}

message MsgLeverageStake {
  string creator = 1;
  string host_denom = 2;
  string equity = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string leverage_ratio = 4 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message MsgLeverageStakeResponse {}