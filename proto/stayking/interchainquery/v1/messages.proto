syntax = "proto3";
package stayking.interchainquery.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "google/api/annotations.proto";
import "tendermint/crypto/proof.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "stayking/interchainquery/v1/swap_route.proto";

option go_package = "github.com/soohoio/stayking/v2/x/interchainquery/types";

// Msg defines the interchainquery Msg service.
service Msg {
  // SubmitQueryResponse defines a method for submit query responses.
  rpc SubmitQueryResponse(MsgSubmitQueryResponse)
      returns (MsgSubmitQueryResponseResponse) {
    option (google.api.http) = {
      post : "/interchainquery/tx/v1beta1/submitquery"
      body : "*"
    };
  };
  rpc SendQueryBalance(MsgSendQueryBalance)
      returns (MsgSendQueryBalanceResponse);
  // Estimates swap amount in given out.

  // Estimates swap amount in given out.
  rpc SendEstimateSwapExactAmountOut(MsgSendEstimateSwapExactAmountOutRequest)
      returns (MsgSendEstimateSwapExactAmountOutResponse) {
    option (google.api.http).get =
        "/interchainquery/tx/v1beta1/{pool_id}/estimate/swap_exact_amount_out";
  }
  // this line is used by starport scaffolding # proto/tx/rpc
}

// MsgSubmitQueryResponse represents a message type to fulfil a query request.
message MsgSubmitQueryResponse {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  string chain_id = 1 [ (gogoproto.moretags) = "yaml:\"chain_id\"" ];
  string query_id = 2 [ (gogoproto.moretags) = "yaml:\"query_id\"" ];
  bytes result = 3 [ (gogoproto.moretags) = "yaml:\"result\"" ];
  tendermint.crypto.ProofOps proof_ops = 4
      [ (gogoproto.moretags) = "yaml:\"proof_ops\"" ];
  int64 height = 5 [ (gogoproto.moretags) = "yaml:\"height\"" ];
  string from_address = 6 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgSubmitQueryResponseResponse defines the MsgSubmitQueryResponse response
// type.
message MsgSubmitQueryResponseResponse {}

message MsgSendQueryAllBalances {
  string creator = 1;
  string channel_id = 2;
  string address = 3;
  cosmos.base.query.v1beta1.PageRequest pagination = 4;
}

message MsgSendQueryAllBalancesResponse { uint64 sequence = 1; }
message MsgSendQueryBalance {
  string creator = 1;
  string channel_id = 2;
  string address = 3;
  string denom = 4;
}

message MsgSendQueryBalanceResponse { uint64 sequence = 1; }

// this line is used by starport scaffolding # proto/tx/message

message MsgSendEstimateSwapExactAmountOutRequest {
  reserved 1;
  reserved "sender";
  string creator = 2;
  uint64 pool_id = 3 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
  repeated SwapAmountOutRoute routes = 4 [
    (gogoproto.moretags) = "yaml:\"routes\"",
    (gogoproto.nullable) = false
  ];
  string token_out = 5 [ (gogoproto.moretags) = "yaml:\"token_out\"" ];
  string channel_id = 6;
}

message MsgSendEstimateSwapExactAmountOutResponse { uint64 sequence = 1; }
