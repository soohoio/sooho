// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stayking/levstakeibc/estimate_swap_exact_amout_out.proto.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//=============================== EstimateSwapExactAmountOut
type EstimateSwapExactAmountOutRequest struct {
	// TODO: CHANGE THIS TO RESERVED IN A PATCH RELEASE
	PoolId   uint64               `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	Routes   []SwapAmountOutRoute `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes" yaml:"routes"`
	TokenOut string               `protobuf:"bytes,3,opt,name=token_out,json=tokenOut,proto3" json:"token_out,omitempty" yaml:"token_out"`
}

func (m *EstimateSwapExactAmountOutRequest) Reset()         { *m = EstimateSwapExactAmountOutRequest{} }
func (m *EstimateSwapExactAmountOutRequest) String() string { return proto.CompactTextString(m) }
func (*EstimateSwapExactAmountOutRequest) ProtoMessage()    {}
func (*EstimateSwapExactAmountOutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_052a8f55e211889e, []int{0}
}
func (m *EstimateSwapExactAmountOutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateSwapExactAmountOutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateSwapExactAmountOutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateSwapExactAmountOutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateSwapExactAmountOutRequest.Merge(m, src)
}
func (m *EstimateSwapExactAmountOutRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateSwapExactAmountOutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateSwapExactAmountOutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateSwapExactAmountOutRequest proto.InternalMessageInfo

func (m *EstimateSwapExactAmountOutRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EstimateSwapExactAmountOutRequest) GetRoutes() []SwapAmountOutRoute {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *EstimateSwapExactAmountOutRequest) GetTokenOut() string {
	if m != nil {
		return m.TokenOut
	}
	return ""
}

type EstimateSwapExactAmountOutResponse struct {
	TokenInAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=token_in_amount,json=tokenInAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_in_amount" yaml:"token_in_amount"`
}

func (m *EstimateSwapExactAmountOutResponse) Reset()         { *m = EstimateSwapExactAmountOutResponse{} }
func (m *EstimateSwapExactAmountOutResponse) String() string { return proto.CompactTextString(m) }
func (*EstimateSwapExactAmountOutResponse) ProtoMessage()    {}
func (*EstimateSwapExactAmountOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_052a8f55e211889e, []int{1}
}
func (m *EstimateSwapExactAmountOutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateSwapExactAmountOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateSwapExactAmountOutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateSwapExactAmountOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateSwapExactAmountOutResponse.Merge(m, src)
}
func (m *EstimateSwapExactAmountOutResponse) XXX_Size() int {
	return m.Size()
}
func (m *EstimateSwapExactAmountOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateSwapExactAmountOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateSwapExactAmountOutResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EstimateSwapExactAmountOutRequest)(nil), "stayking.levstakeibc.EstimateSwapExactAmountOutRequest")
	proto.RegisterType((*EstimateSwapExactAmountOutResponse)(nil), "stayking.levstakeibc.EstimateSwapExactAmountOutResponse")
}

func init() {
	proto.RegisterFile("stayking/levstakeibc/estimate_swap_exact_amout_out.proto.proto", fileDescriptor_052a8f55e211889e)
}

var fileDescriptor_052a8f55e211889e = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0xed, 0xb8, 0x52, 0x6d, 0x64, 0x55, 0x42, 0x95, 0xba, 0x0f, 0x49, 0x1d, 0x70, 0x29, 0x88,
	0x09, 0xd6, 0x37, 0x1f, 0x04, 0x03, 0x0b, 0x16, 0x84, 0x85, 0xf8, 0x20, 0xf8, 0x12, 0xa6, 0xe9,
	0xd0, 0x1d, 0xda, 0xcc, 0x8d, 0x3b, 0x77, 0x76, 0xb7, 0xff, 0xc2, 0x27, 0x7f, 0xd3, 0x3e, 0xee,
	0xa3, 0x88, 0x04, 0x69, 0xff, 0x41, 0x7e, 0x81, 0xcc, 0x87, 0xb5, 0x42, 0xd9, 0x97, 0xe4, 0xce,
	0xdc, 0x39, 0xe7, 0xdc, 0x73, 0x4f, 0xf0, 0x4e, 0x21, 0x5b, 0x2d, 0x84, 0x9c, 0xa7, 0x4b, 0x7e,
	0xa1, 0x90, 0x2d, 0xb8, 0x98, 0x96, 0x29, 0x57, 0x28, 0x2a, 0x86, 0xbc, 0x50, 0x97, 0xac, 0x2e,
	0xf8, 0x15, 0x2b, 0xb1, 0x60, 0x15, 0x68, 0x2c, 0x40, 0x63, 0x52, 0x9f, 0x03, 0x82, 0xfb, 0x86,
	0xfd, 0xbf, 0xf8, 0x64, 0x07, 0x7f, 0x74, 0xbc, 0x97, 0x55, 0x94, 0xac, 0x60, 0x65, 0x09, 0x5a,
	0x7a, 0x8e, 0xa3, 0xfe, 0x1c, 0xe6, 0x60, 0xcb, 0xd4, 0x54, 0xfe, 0xf6, 0x59, 0x09, 0xaa, 0x02,
	0x55, 0xb8, 0x86, 0x3b, 0xf8, 0xd6, 0x8b, 0xbd, 0xc4, 0x76, 0xca, 0x73, 0xd0, 0xc8, 0xdd, 0x33,
	0xfa, 0x8b, 0x04, 0xcf, 0x4f, 0xbc, 0x87, 0x4f, 0x97, 0xac, 0x3e, 0x31, 0x0e, 0xde, 0x57, 0x46,
	0xf9, 0x54, 0x63, 0xce, 0xbf, 0x6a, 0xae, 0x30, 0x7c, 0x19, 0xdc, 0xab, 0x01, 0x96, 0x85, 0x98,
	0x0d, 0xc8, 0x90, 0x8c, 0xee, 0x66, 0x61, 0xdb, 0xc4, 0x0f, 0x57, 0xac, 0x5a, 0xbe, 0xa5, 0xbe,
	0x41, 0xf3, 0xae, 0xa9, 0x26, 0xb3, 0xf0, 0x73, 0xd0, 0xb5, 0x0a, 0x6a, 0x70, 0x67, 0x78, 0x30,
	0x7a, 0x30, 0x1e, 0x25, 0xfb, 0x9c, 0x27, 0x46, 0xed, 0x9f, 0x90, 0x01, 0x64, 0x4f, 0xae, 0x9b,
	0xb8, 0xd3, 0x36, 0xf1, 0xa1, 0x63, 0x76, 0x2c, 0x34, 0xf7, 0x74, 0xe1, 0xeb, 0xa0, 0x87, 0xb0,
	0xe0, 0xd2, 0xac, 0x76, 0x70, 0x30, 0x24, 0xa3, 0x5e, 0xd6, 0x6f, 0x9b, 0xf8, 0xb1, 0x7b, 0xbd,
	0x6d, 0xd1, 0xfc, 0xbe, 0xad, 0x4f, 0x35, 0xd2, 0xef, 0x24, 0xa0, 0xb7, 0xd9, 0x53, 0x35, 0x48,
	0xc5, 0xc3, 0x3a, 0x78, 0xe4, 0xe0, 0x42, 0xda, 0xf4, 0x24, 0x5a, 0x9f, 0xbd, 0xec, 0x83, 0x99,
	0xe8, 0x67, 0x13, 0x1f, 0xcf, 0x05, 0x9e, 0xe9, 0x69, 0x52, 0x42, 0xe5, 0xd7, 0xec, 0x7f, 0xaf,
	0xd4, 0x6c, 0x91, 0xe2, 0xaa, 0xe6, 0x2a, 0x99, 0x48, 0x6c, 0x9b, 0xf8, 0xe9, 0xee, 0x34, 0x5b,
	0x3a, 0x9a, 0x1f, 0xda, 0x9b, 0x89, 0x74, 0xe2, 0xd9, 0xc7, 0xeb, 0x75, 0x44, 0x6e, 0xd6, 0x11,
	0xf9, 0xbd, 0x8e, 0xc8, 0xb7, 0x4d, 0xd4, 0xb9, 0xd9, 0x44, 0x9d, 0x1f, 0x9b, 0xa8, 0xf3, 0x65,
	0xbc, 0x23, 0xa5, 0x00, 0xce, 0x40, 0x40, 0xba, 0xcd, 0xf2, 0x62, 0x9c, 0x5e, 0xfd, 0x17, 0xa8,
	0x95, 0x9e, 0x76, 0x6d, 0x98, 0x6f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xd8, 0xb8, 0x24,
	0xa4, 0x02, 0x00, 0x00,
}

func (m *EstimateSwapExactAmountOutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateSwapExactAmountOutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateSwapExactAmountOutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenOut) > 0 {
		i -= len(m.TokenOut)
		copy(dAtA[i:], m.TokenOut)
		i = encodeVarintEstimateSwapExactAmoutOut(dAtA, i, uint64(len(m.TokenOut)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEstimateSwapExactAmoutOut(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PoolId != 0 {
		i = encodeVarintEstimateSwapExactAmoutOut(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EstimateSwapExactAmountOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateSwapExactAmountOutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateSwapExactAmountOutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TokenInAmount.Size()
		i -= size
		if _, err := m.TokenInAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEstimateSwapExactAmoutOut(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintEstimateSwapExactAmoutOut(dAtA []byte, offset int, v uint64) int {
	offset -= sovEstimateSwapExactAmoutOut(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EstimateSwapExactAmountOutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovEstimateSwapExactAmoutOut(uint64(m.PoolId))
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovEstimateSwapExactAmoutOut(uint64(l))
		}
	}
	l = len(m.TokenOut)
	if l > 0 {
		n += 1 + l + sovEstimateSwapExactAmoutOut(uint64(l))
	}
	return n
}

func (m *EstimateSwapExactAmountOutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenInAmount.Size()
	n += 1 + l + sovEstimateSwapExactAmoutOut(uint64(l))
	return n
}

func sovEstimateSwapExactAmoutOut(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEstimateSwapExactAmoutOut(x uint64) (n int) {
	return sovEstimateSwapExactAmoutOut(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EstimateSwapExactAmountOutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstimateSwapExactAmoutOut
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateSwapExactAmountOutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateSwapExactAmountOutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimateSwapExactAmoutOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimateSwapExactAmoutOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstimateSwapExactAmoutOut
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstimateSwapExactAmoutOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, SwapAmountOutRoute{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimateSwapExactAmoutOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimateSwapExactAmoutOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimateSwapExactAmoutOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstimateSwapExactAmoutOut(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstimateSwapExactAmoutOut
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateSwapExactAmountOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstimateSwapExactAmoutOut
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateSwapExactAmountOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateSwapExactAmountOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenInAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimateSwapExactAmoutOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimateSwapExactAmoutOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimateSwapExactAmoutOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenInAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstimateSwapExactAmoutOut(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstimateSwapExactAmoutOut
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEstimateSwapExactAmoutOut(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEstimateSwapExactAmoutOut
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEstimateSwapExactAmoutOut
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEstimateSwapExactAmoutOut
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEstimateSwapExactAmoutOut
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEstimateSwapExactAmoutOut
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEstimateSwapExactAmoutOut
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEstimateSwapExactAmoutOut        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEstimateSwapExactAmoutOut          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEstimateSwapExactAmoutOut = fmt.Errorf("proto: unexpected end of group")
)
