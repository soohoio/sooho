// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stayking/levstakeibc/position.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PositionStatus int32

const (
	// in transfer queue to be sent to the delegation ICA
	PositionStatus_POSITION_PENDING               PositionStatus = 0
	PositionStatus_POSITION_ACTIVE                PositionStatus = 1
	PositionStatus_POSITION_UNBONDING_IN_PROGRESS PositionStatus = 2
)

var PositionStatus_name = map[int32]string{
	0: "POSITION_PENDING",
	1: "POSITION_ACTIVE",
	2: "POSITION_UNBONDING_IN_PROGRESS",
}

var PositionStatus_value = map[string]int32{
	"POSITION_PENDING":               0,
	"POSITION_ACTIVE":                1,
	"POSITION_UNBONDING_IN_PROGRESS": 2,
}

func (x PositionStatus) String() string {
	return proto.EnumName(PositionStatus_name, int32(x))
}

func (PositionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9db3bb81b9a39854, []int{0}
}

type Position struct {
	Id                uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	LoanId            uint64                                 `protobuf:"varint,2,opt,name=loan_id,json=loanId,proto3" json:"loan_id,omitempty" yaml:"loan_id"`
	Sender            string                                 `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Denom             string                                 `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty"`
	StTokenAmount     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=st_token_amount,json=stTokenAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"st_token_amount"`
	NativeTokenAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=native_token_amount,json=nativeTokenAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"native_token_amount"`
	Status            PositionStatus                         `protobuf:"varint,7,opt,name=status,proto3,enum=stayking.levstakeibc.PositionStatus" json:"status,omitempty"`
	Liquidated        bool                                   `protobuf:"varint,8,opt,name=liquidated,proto3" json:"liquidated,omitempty"`
	DepositRecordId   uint64                                 `protobuf:"varint,9,opt,name=deposit_record_id,json=depositRecordId,proto3" json:"deposit_record_id,omitempty"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_9db3bb81b9a39854, []int{0}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Position) GetLoanId() uint64 {
	if m != nil {
		return m.LoanId
	}
	return 0
}

func (m *Position) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Position) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Position) GetStatus() PositionStatus {
	if m != nil {
		return m.Status
	}
	return PositionStatus_POSITION_PENDING
}

func (m *Position) GetLiquidated() bool {
	if m != nil {
		return m.Liquidated
	}
	return false
}

func (m *Position) GetDepositRecordId() uint64 {
	if m != nil {
		return m.DepositRecordId
	}
	return 0
}

func init() {
	proto.RegisterEnum("stayking.levstakeibc.PositionStatus", PositionStatus_name, PositionStatus_value)
	proto.RegisterType((*Position)(nil), "stayking.levstakeibc.Position")
}

func init() {
	proto.RegisterFile("stayking/levstakeibc/position.proto", fileDescriptor_9db3bb81b9a39854)
}

var fileDescriptor_9db3bb81b9a39854 = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x41, 0x6b, 0x1a, 0x41,
	0x14, 0xc7, 0x77, 0x4c, 0xb2, 0x89, 0x03, 0x51, 0x33, 0x91, 0xb2, 0x14, 0xba, 0xca, 0xb6, 0x14,
	0x49, 0xe9, 0x2e, 0x24, 0xb7, 0xd2, 0x4b, 0x6c, 0x25, 0x2c, 0x94, 0x55, 0x46, 0x9b, 0x43, 0x0f,
	0x5d, 0x56, 0x67, 0x30, 0x83, 0xee, 0x3c, 0xeb, 0x8c, 0x52, 0xbf, 0x45, 0x3f, 0x55, 0xc9, 0x31,
	0xc7, 0xd2, 0x83, 0x14, 0xfd, 0x06, 0xf9, 0x04, 0x65, 0xc7, 0x8d, 0x28, 0xf4, 0xd4, 0xd3, 0xbe,
	0xf7, 0x7f, 0xbf, 0xf7, 0x5f, 0xf8, 0xcf, 0xc3, 0x2f, 0x95, 0x4e, 0x16, 0x23, 0x21, 0x87, 0xc1,
	0x98, 0xcf, 0x95, 0x4e, 0x46, 0x5c, 0xf4, 0x07, 0xc1, 0x04, 0x94, 0xd0, 0x02, 0xa4, 0x3f, 0x99,
	0x82, 0x06, 0x52, 0x7d, 0x82, 0xfc, 0x1d, 0xe8, 0x79, 0x75, 0x08, 0x43, 0x30, 0x40, 0x90, 0x55,
	0x1b, 0xd6, 0xfb, 0x79, 0x80, 0x4f, 0x3a, 0xf9, 0x3a, 0x79, 0x81, 0x0b, 0x82, 0x39, 0xa8, 0x8e,
	0x1a, 0x87, 0xcd, 0xd3, 0xc7, 0x65, 0xad, 0xb8, 0x48, 0xd2, 0xf1, 0x3b, 0x4f, 0x30, 0x8f, 0x16,
	0x04, 0x23, 0x6f, 0xf0, 0xf1, 0x18, 0x12, 0x19, 0x0b, 0xe6, 0x14, 0x0c, 0x43, 0x1e, 0x97, 0xb5,
	0xd2, 0x86, 0xc9, 0x07, 0x1e, 0xb5, 0xb3, 0x2a, 0x64, 0xe4, 0x19, 0xb6, 0x15, 0x97, 0x8c, 0x4f,
	0x9d, 0x83, 0x3a, 0x6a, 0x14, 0x69, 0xde, 0x91, 0x2a, 0x3e, 0x62, 0x5c, 0x42, 0xea, 0x1c, 0x1a,
	0x79, 0xd3, 0x90, 0x5b, 0x5c, 0x56, 0x3a, 0xd6, 0x30, 0xe2, 0x32, 0x4e, 0x52, 0x98, 0x49, 0xed,
	0x1c, 0x65, 0xf3, 0xa6, 0x7f, 0xbf, 0xac, 0x59, 0xbf, 0x97, 0xb5, 0xd7, 0x43, 0xa1, 0xef, 0x66,
	0x7d, 0x7f, 0x00, 0x69, 0x30, 0x00, 0x95, 0x82, 0xca, 0x3f, 0x6f, 0x15, 0x1b, 0x05, 0x7a, 0x31,
	0xe1, 0xca, 0x0f, 0xa5, 0xa6, 0xa7, 0x4a, 0xf7, 0x32, 0x97, 0x6b, 0x63, 0x42, 0xbe, 0xe2, 0x73,
	0x99, 0x68, 0x31, 0xe7, 0xfb, 0xde, 0xf6, 0x7f, 0x79, 0x9f, 0x6d, 0xac, 0x76, 0xfd, 0xdf, 0x63,
	0x5b, 0xe9, 0x44, 0xcf, 0x94, 0x73, 0x5c, 0x47, 0x8d, 0xd2, 0xe5, 0x2b, 0xff, 0x5f, 0xd9, 0xfb,
	0x4f, 0x09, 0x77, 0x0d, 0x4b, 0xf3, 0x1d, 0xe2, 0x62, 0x3c, 0x16, 0xdf, 0x66, 0x82, 0x25, 0x9a,
	0x33, 0xe7, 0xa4, 0x8e, 0x1a, 0x27, 0x74, 0x47, 0x21, 0x17, 0xf8, 0x8c, 0x71, 0xf3, 0xb8, 0xf1,
	0x94, 0x0f, 0x60, 0xca, 0xb2, 0xe8, 0x8b, 0x59, 0xf4, 0xb4, 0x9c, 0x0f, 0xa8, 0xd1, 0x43, 0x76,
	0x11, 0xe3, 0xd2, 0xfe, 0x5f, 0x48, 0x15, 0x57, 0x3a, 0xed, 0x6e, 0xd8, 0x0b, 0xdb, 0x51, 0xdc,
	0x69, 0x45, 0x1f, 0xc3, 0xe8, 0xa6, 0x62, 0x91, 0x73, 0x5c, 0xde, 0xaa, 0xd7, 0x1f, 0x7a, 0xe1,
	0x6d, 0xab, 0x82, 0x88, 0x87, 0xdd, 0xad, 0xf8, 0x39, 0x6a, 0xb6, 0x0d, 0x1c, 0x87, 0x51, 0xdc,
	0xa1, 0xed, 0x1b, 0xda, 0xea, 0x76, 0x2b, 0x85, 0xe6, 0xa7, 0xfb, 0x95, 0x8b, 0x1e, 0x56, 0x2e,
	0xfa, 0xb3, 0x72, 0xd1, 0x8f, 0xb5, 0x6b, 0x3d, 0xac, 0x5d, 0xeb, 0xd7, 0xda, 0xb5, 0xbe, 0x5c,
	0xee, 0xe4, 0xa7, 0x00, 0xee, 0x40, 0x40, 0xb0, 0xbd, 0xd3, 0xf9, 0x55, 0xf0, 0x7d, 0xef, 0x58,
	0x4d, 0x9e, 0x7d, 0xdb, 0x9c, 0xdf, 0xd5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x32, 0x33, 0x8a,
	0x2e, 0xd1, 0x02, 0x00, 0x00,
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DepositRecordId != 0 {
		i = encodeVarintPosition(dAtA, i, uint64(m.DepositRecordId))
		i--
		dAtA[i] = 0x48
	}
	if m.Liquidated {
		i--
		if m.Liquidated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintPosition(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.NativeTokenAmount.Size()
		i -= size
		if _, err := m.NativeTokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPosition(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.StTokenAmount.Size()
		i -= size
		if _, err := m.StTokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPosition(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintPosition(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPosition(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LoanId != 0 {
		i = encodeVarintPosition(dAtA, i, uint64(m.LoanId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintPosition(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPosition(dAtA []byte, offset int, v uint64) int {
	offset -= sovPosition(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPosition(uint64(m.Id))
	}
	if m.LoanId != 0 {
		n += 1 + sovPosition(uint64(m.LoanId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPosition(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovPosition(uint64(l))
	}
	l = m.StTokenAmount.Size()
	n += 1 + l + sovPosition(uint64(l))
	l = m.NativeTokenAmount.Size()
	n += 1 + l + sovPosition(uint64(l))
	if m.Status != 0 {
		n += 1 + sovPosition(uint64(m.Status))
	}
	if m.Liquidated {
		n += 2
	}
	if m.DepositRecordId != 0 {
		n += 1 + sovPosition(uint64(m.DepositRecordId))
	}
	return n
}

func sovPosition(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPosition(x uint64) (n int) {
	return sovPosition(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanId", wireType)
			}
			m.LoanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StTokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StTokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeTokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NativeTokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= PositionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Liquidated = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositRecordId", wireType)
			}
			m.DepositRecordId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositRecordId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPosition(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPosition
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPosition
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPosition
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPosition
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPosition        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPosition          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPosition = fmt.Errorf("proto: unexpected end of group")
)
