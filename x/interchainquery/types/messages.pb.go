// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stayking/interchainquery/v1/messages.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	crypto "github.com/tendermint/tendermint/proto/tendermint/crypto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSubmitQueryResponse represents a message type to fulfil a query request.
type MsgSubmitQueryResponse struct {
	ChainId     string           `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	QueryId     string           `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty" yaml:"query_id"`
	Result      []byte           `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty" yaml:"result"`
	ProofOps    *crypto.ProofOps `protobuf:"bytes,4,opt,name=proof_ops,json=proofOps,proto3" json:"proof_ops,omitempty" yaml:"proof_ops"`
	Height      int64            `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty" yaml:"height"`
	FromAddress string           `protobuf:"bytes,6,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (m *MsgSubmitQueryResponse) Reset()         { *m = MsgSubmitQueryResponse{} }
func (m *MsgSubmitQueryResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitQueryResponse) ProtoMessage()    {}
func (*MsgSubmitQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea1ebc5c6d8a15b8, []int{0}
}
func (m *MsgSubmitQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitQueryResponse.Merge(m, src)
}
func (m *MsgSubmitQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitQueryResponse proto.InternalMessageInfo

// MsgSubmitQueryResponseResponse defines the MsgSubmitQueryResponse response
// type.
type MsgSubmitQueryResponseResponse struct {
}

func (m *MsgSubmitQueryResponseResponse) Reset()         { *m = MsgSubmitQueryResponseResponse{} }
func (m *MsgSubmitQueryResponseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitQueryResponseResponse) ProtoMessage()    {}
func (*MsgSubmitQueryResponseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea1ebc5c6d8a15b8, []int{1}
}
func (m *MsgSubmitQueryResponseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitQueryResponseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitQueryResponseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitQueryResponseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitQueryResponseResponse.Merge(m, src)
}
func (m *MsgSubmitQueryResponseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitQueryResponseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitQueryResponseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitQueryResponseResponse proto.InternalMessageInfo

type MsgSendQueryAllBalances struct {
	Creator    string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChannelId  string             `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Address    string             `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *MsgSendQueryAllBalances) Reset()         { *m = MsgSendQueryAllBalances{} }
func (m *MsgSendQueryAllBalances) String() string { return proto.CompactTextString(m) }
func (*MsgSendQueryAllBalances) ProtoMessage()    {}
func (*MsgSendQueryAllBalances) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea1ebc5c6d8a15b8, []int{2}
}
func (m *MsgSendQueryAllBalances) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendQueryAllBalances) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendQueryAllBalances.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendQueryAllBalances) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendQueryAllBalances.Merge(m, src)
}
func (m *MsgSendQueryAllBalances) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendQueryAllBalances) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendQueryAllBalances.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendQueryAllBalances proto.InternalMessageInfo

func (m *MsgSendQueryAllBalances) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSendQueryAllBalances) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *MsgSendQueryAllBalances) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgSendQueryAllBalances) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type MsgSendQueryAllBalancesResponse struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *MsgSendQueryAllBalancesResponse) Reset()         { *m = MsgSendQueryAllBalancesResponse{} }
func (m *MsgSendQueryAllBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendQueryAllBalancesResponse) ProtoMessage()    {}
func (*MsgSendQueryAllBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea1ebc5c6d8a15b8, []int{3}
}
func (m *MsgSendQueryAllBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendQueryAllBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendQueryAllBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendQueryAllBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendQueryAllBalancesResponse.Merge(m, src)
}
func (m *MsgSendQueryAllBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendQueryAllBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendQueryAllBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendQueryAllBalancesResponse proto.InternalMessageInfo

func (m *MsgSendQueryAllBalancesResponse) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type MsgSendQueryBalance struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Address   string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Denom     string `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *MsgSendQueryBalance) Reset()         { *m = MsgSendQueryBalance{} }
func (m *MsgSendQueryBalance) String() string { return proto.CompactTextString(m) }
func (*MsgSendQueryBalance) ProtoMessage()    {}
func (*MsgSendQueryBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea1ebc5c6d8a15b8, []int{4}
}
func (m *MsgSendQueryBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendQueryBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendQueryBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendQueryBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendQueryBalance.Merge(m, src)
}
func (m *MsgSendQueryBalance) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendQueryBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendQueryBalance.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendQueryBalance proto.InternalMessageInfo

func (m *MsgSendQueryBalance) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSendQueryBalance) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *MsgSendQueryBalance) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgSendQueryBalance) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type MsgSendQueryBalanceResponse struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *MsgSendQueryBalanceResponse) Reset()         { *m = MsgSendQueryBalanceResponse{} }
func (m *MsgSendQueryBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendQueryBalanceResponse) ProtoMessage()    {}
func (*MsgSendQueryBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea1ebc5c6d8a15b8, []int{5}
}
func (m *MsgSendQueryBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendQueryBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendQueryBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendQueryBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendQueryBalanceResponse.Merge(m, src)
}
func (m *MsgSendQueryBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendQueryBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendQueryBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendQueryBalanceResponse proto.InternalMessageInfo

func (m *MsgSendQueryBalanceResponse) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type MsgSetIcqParams struct {
	Creator                string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PriceQueryChannelId    string `protobuf:"bytes,2,opt,name=price_query_channel_id,json=priceQueryChannelId,proto3" json:"price_query_channel_id,omitempty"`
	PriceQueryPoolId       string `protobuf:"bytes,3,opt,name=price_query_pool_id,json=priceQueryPoolId,proto3" json:"price_query_pool_id,omitempty"`
	PriceQueryRoutesPoolId string `protobuf:"bytes,4,opt,name=price_query_routes_pool_id,json=priceQueryRoutesPoolId,proto3" json:"price_query_routes_pool_id,omitempty"`
	PriceQueryTokenInDenom string `protobuf:"bytes,5,opt,name=price_query_token_in_denom,json=priceQueryTokenInDenom,proto3" json:"price_query_token_in_denom,omitempty"`
	PriceQueryTokenOut     string `protobuf:"bytes,6,opt,name=price_query_token_out,json=priceQueryTokenOut,proto3" json:"price_query_token_out,omitempty"`
	PriceQueryPath         string `protobuf:"bytes,7,opt,name=price_query_path,json=priceQueryPath,proto3" json:"price_query_path,omitempty"`
}

func (m *MsgSetIcqParams) Reset()         { *m = MsgSetIcqParams{} }
func (m *MsgSetIcqParams) String() string { return proto.CompactTextString(m) }
func (*MsgSetIcqParams) ProtoMessage()    {}
func (*MsgSetIcqParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea1ebc5c6d8a15b8, []int{6}
}
func (m *MsgSetIcqParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetIcqParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetIcqParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetIcqParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetIcqParams.Merge(m, src)
}
func (m *MsgSetIcqParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetIcqParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetIcqParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetIcqParams proto.InternalMessageInfo

func (m *MsgSetIcqParams) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetIcqParams) GetPriceQueryChannelId() string {
	if m != nil {
		return m.PriceQueryChannelId
	}
	return ""
}

func (m *MsgSetIcqParams) GetPriceQueryPoolId() string {
	if m != nil {
		return m.PriceQueryPoolId
	}
	return ""
}

func (m *MsgSetIcqParams) GetPriceQueryRoutesPoolId() string {
	if m != nil {
		return m.PriceQueryRoutesPoolId
	}
	return ""
}

func (m *MsgSetIcqParams) GetPriceQueryTokenInDenom() string {
	if m != nil {
		return m.PriceQueryTokenInDenom
	}
	return ""
}

func (m *MsgSetIcqParams) GetPriceQueryTokenOut() string {
	if m != nil {
		return m.PriceQueryTokenOut
	}
	return ""
}

func (m *MsgSetIcqParams) GetPriceQueryPath() string {
	if m != nil {
		return m.PriceQueryPath
	}
	return ""
}

type MsgSetIcqParamsResponse struct {
}

func (m *MsgSetIcqParamsResponse) Reset()         { *m = MsgSetIcqParamsResponse{} }
func (m *MsgSetIcqParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetIcqParamsResponse) ProtoMessage()    {}
func (*MsgSetIcqParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea1ebc5c6d8a15b8, []int{7}
}
func (m *MsgSetIcqParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetIcqParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetIcqParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetIcqParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetIcqParamsResponse.Merge(m, src)
}
func (m *MsgSetIcqParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetIcqParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetIcqParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetIcqParamsResponse proto.InternalMessageInfo

type MsgSendEstimateSwapExactAmountOutRequest struct {
	Creator   string               `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	PoolId    uint64               `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	Routes    []SwapAmountOutRoute `protobuf:"bytes,4,rep,name=routes,proto3" json:"routes" yaml:"routes"`
	TokenOut  string               `protobuf:"bytes,5,opt,name=token_out,json=tokenOut,proto3" json:"token_out,omitempty" yaml:"token_out"`
	ChannelId string               `protobuf:"bytes,6,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *MsgSendEstimateSwapExactAmountOutRequest) Reset() {
	*m = MsgSendEstimateSwapExactAmountOutRequest{}
}
func (m *MsgSendEstimateSwapExactAmountOutRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSendEstimateSwapExactAmountOutRequest) ProtoMessage()    {}
func (*MsgSendEstimateSwapExactAmountOutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea1ebc5c6d8a15b8, []int{8}
}
func (m *MsgSendEstimateSwapExactAmountOutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendEstimateSwapExactAmountOutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendEstimateSwapExactAmountOutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendEstimateSwapExactAmountOutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendEstimateSwapExactAmountOutRequest.Merge(m, src)
}
func (m *MsgSendEstimateSwapExactAmountOutRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendEstimateSwapExactAmountOutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendEstimateSwapExactAmountOutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendEstimateSwapExactAmountOutRequest proto.InternalMessageInfo

func (m *MsgSendEstimateSwapExactAmountOutRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSendEstimateSwapExactAmountOutRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgSendEstimateSwapExactAmountOutRequest) GetRoutes() []SwapAmountOutRoute {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *MsgSendEstimateSwapExactAmountOutRequest) GetTokenOut() string {
	if m != nil {
		return m.TokenOut
	}
	return ""
}

func (m *MsgSendEstimateSwapExactAmountOutRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type MsgSendEstimateSwapExactAmountOutResponse struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *MsgSendEstimateSwapExactAmountOutResponse) Reset() {
	*m = MsgSendEstimateSwapExactAmountOutResponse{}
}
func (m *MsgSendEstimateSwapExactAmountOutResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgSendEstimateSwapExactAmountOutResponse) ProtoMessage() {}
func (*MsgSendEstimateSwapExactAmountOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea1ebc5c6d8a15b8, []int{9}
}
func (m *MsgSendEstimateSwapExactAmountOutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendEstimateSwapExactAmountOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendEstimateSwapExactAmountOutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendEstimateSwapExactAmountOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendEstimateSwapExactAmountOutResponse.Merge(m, src)
}
func (m *MsgSendEstimateSwapExactAmountOutResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendEstimateSwapExactAmountOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendEstimateSwapExactAmountOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendEstimateSwapExactAmountOutResponse proto.InternalMessageInfo

func (m *MsgSendEstimateSwapExactAmountOutResponse) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgSubmitQueryResponse)(nil), "stayking.interchainquery.v1.MsgSubmitQueryResponse")
	proto.RegisterType((*MsgSubmitQueryResponseResponse)(nil), "stayking.interchainquery.v1.MsgSubmitQueryResponseResponse")
	proto.RegisterType((*MsgSendQueryAllBalances)(nil), "stayking.interchainquery.v1.MsgSendQueryAllBalances")
	proto.RegisterType((*MsgSendQueryAllBalancesResponse)(nil), "stayking.interchainquery.v1.MsgSendQueryAllBalancesResponse")
	proto.RegisterType((*MsgSendQueryBalance)(nil), "stayking.interchainquery.v1.MsgSendQueryBalance")
	proto.RegisterType((*MsgSendQueryBalanceResponse)(nil), "stayking.interchainquery.v1.MsgSendQueryBalanceResponse")
	proto.RegisterType((*MsgSetIcqParams)(nil), "stayking.interchainquery.v1.MsgSetIcqParams")
	proto.RegisterType((*MsgSetIcqParamsResponse)(nil), "stayking.interchainquery.v1.MsgSetIcqParamsResponse")
	proto.RegisterType((*MsgSendEstimateSwapExactAmountOutRequest)(nil), "stayking.interchainquery.v1.MsgSendEstimateSwapExactAmountOutRequest")
	proto.RegisterType((*MsgSendEstimateSwapExactAmountOutResponse)(nil), "stayking.interchainquery.v1.MsgSendEstimateSwapExactAmountOutResponse")
}

func init() {
	proto.RegisterFile("stayking/interchainquery/v1/messages.proto", fileDescriptor_ea1ebc5c6d8a15b8)
}

var fileDescriptor_ea1ebc5c6d8a15b8 = []byte{
	// 1040 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0x3a, 0x89, 0x63, 0x4f, 0x43, 0x6b, 0xd6, 0x69, 0x70, 0x1d, 0x6a, 0x5b, 0x7b, 0x00,
	0x37, 0xa4, 0xbb, 0xd8, 0x41, 0x08, 0x52, 0x71, 0x88, 0x69, 0x82, 0x8c, 0x28, 0x31, 0x1b, 0x4e,
	0x1c, 0xb0, 0xc6, 0xeb, 0xe9, 0x7a, 0x55, 0xef, 0xcc, 0x66, 0x67, 0x36, 0x8d, 0x85, 0xe8, 0x81,
	0x13, 0x47, 0x24, 0x2e, 0x1c, 0xf3, 0x17, 0x90, 0x2a, 0x71, 0xe0, 0x0f, 0xf4, 0x58, 0xc1, 0x85,
	0x93, 0x85, 0x92, 0x1e, 0xe0, 0x9a, 0x3b, 0x12, 0xda, 0x99, 0xd9, 0xf5, 0xc6, 0x36, 0x4e, 0x0a,
	0xe2, 0xe4, 0x9d, 0x79, 0xdf, 0xf7, 0xe6, 0xbd, 0xef, 0xbd, 0x37, 0x63, 0xb0, 0x41, 0x19, 0x1c,
	0x3e, 0x72, 0xb0, 0x6d, 0x38, 0x98, 0x21, 0xdf, 0xea, 0x43, 0x07, 0x1f, 0x06, 0xc8, 0x1f, 0x1a,
	0x47, 0x75, 0xc3, 0x45, 0x94, 0x42, 0x1b, 0x51, 0xdd, 0xf3, 0x09, 0x23, 0xea, 0x7a, 0x84, 0xd5,
	0x27, 0xb0, 0xfa, 0x51, 0xbd, 0xb4, 0x6a, 0x13, 0x9b, 0x70, 0x9c, 0x11, 0x7e, 0x09, 0x4a, 0xe9,
	0x96, 0x45, 0xa8, 0x4b, 0x68, 0x47, 0x18, 0xc4, 0x42, 0x9a, 0x5e, 0xb7, 0x09, 0xb1, 0x07, 0xc8,
	0x80, 0x9e, 0x63, 0x40, 0x8c, 0x09, 0x83, 0xcc, 0x21, 0x38, 0xb2, 0xde, 0x66, 0x08, 0xf7, 0x90,
	0xef, 0x3a, 0x98, 0x19, 0x96, 0x3f, 0xf4, 0x18, 0x31, 0x3c, 0x9f, 0x90, 0x87, 0xd2, 0xbc, 0x21,
	0x5c, 0x19, 0x5d, 0x48, 0x91, 0x11, 0xc5, 0xdb, 0x45, 0x0c, 0xd6, 0x0d, 0x0f, 0xda, 0x0e, 0xe6,
	0xbe, 0x24, 0x76, 0x73, 0x5e, 0x8a, 0xf4, 0x31, 0xf4, 0x3a, 0x3e, 0x09, 0x18, 0x12, 0x68, 0xed,
	0xcf, 0x34, 0x58, 0x7b, 0x40, 0xed, 0x83, 0xa0, 0xeb, 0x3a, 0xec, 0xb3, 0x10, 0x66, 0x22, 0xea,
	0x11, 0x4c, 0x91, 0xaa, 0x83, 0x2c, 0x27, 0x77, 0x9c, 0x5e, 0x51, 0xa9, 0x2a, 0xb5, 0x5c, 0xb3,
	0x70, 0x3e, 0xaa, 0xdc, 0x18, 0x42, 0x77, 0xb0, 0xad, 0x45, 0x16, 0xcd, 0x5c, 0xe6, 0x9f, 0xad,
	0x5e, 0x88, 0xe7, 0xe7, 0x84, 0xf8, 0xf4, 0x24, 0x3e, 0xb2, 0x68, 0xe6, 0x32, 0xff, 0x6c, 0xf5,
	0xd4, 0x3b, 0x20, 0xe3, 0x23, 0x1a, 0x0c, 0x58, 0x71, 0xa1, 0xaa, 0xd4, 0x56, 0x9a, 0xaf, 0x9e,
	0x8f, 0x2a, 0xaf, 0x08, 0xb4, 0xd8, 0xd7, 0x4c, 0x09, 0x50, 0x3f, 0x05, 0x39, 0x2e, 0x47, 0x87,
	0x78, 0xb4, 0xb8, 0x58, 0x55, 0x6a, 0xd7, 0x1a, 0xeb, 0xfa, 0x58, 0x32, 0x5d, 0x48, 0xa6, 0xb7,
	0x43, 0xcc, 0xbe, 0x47, 0x9b, 0xab, 0xe7, 0xa3, 0x4a, 0x5e, 0xb8, 0x8a, 0x79, 0x9a, 0x99, 0xf5,
	0xa4, 0x3d, 0x3c, 0xba, 0x8f, 0x1c, 0xbb, 0xcf, 0x8a, 0x4b, 0x55, 0xa5, 0xb6, 0x90, 0x3c, 0x5a,
	0xec, 0x6b, 0xa6, 0x04, 0xa8, 0xf7, 0xc0, 0xca, 0x43, 0x9f, 0xb8, 0x1d, 0xd8, 0xeb, 0xf9, 0x88,
	0xd2, 0x62, 0x86, 0x67, 0x56, 0xfc, 0xe5, 0xe9, 0xdd, 0x55, 0x59, 0xdf, 0x1d, 0x61, 0x39, 0x60,
	0xbe, 0x83, 0x6d, 0xf3, 0x5a, 0x88, 0x96, 0x5b, 0xdb, 0x2b, 0xdf, 0x9e, 0x54, 0x52, 0x3f, 0x9c,
	0x54, 0x94, 0x3f, 0x4e, 0x2a, 0x29, 0xad, 0x0a, 0xca, 0xb3, 0xa5, 0x8e, 0x7e, 0xb5, 0xa7, 0x0a,
	0x78, 0x2d, 0x84, 0x20, 0xdc, 0xe3, 0x80, 0x9d, 0xc1, 0xa0, 0x09, 0x07, 0x10, 0x5b, 0x88, 0xaa,
	0x45, 0xb0, 0x6c, 0xf9, 0x08, 0x32, 0xe2, 0x8b, 0x6a, 0x98, 0xd1, 0x52, 0xbd, 0x0d, 0x80, 0xd5,
	0x87, 0x18, 0xa3, 0x41, 0x2c, 0xbd, 0x99, 0x93, 0x3b, 0xad, 0x5e, 0x48, 0x8c, 0x82, 0x5f, 0x10,
	0x44, 0xb9, 0x54, 0xf7, 0x00, 0x18, 0xb7, 0x8f, 0xd4, 0xf5, 0x0d, 0x5d, 0xa6, 0x15, 0xf6, 0x9a,
	0x1e, 0xf5, 0x3b, 0xef, 0x35, 0xbd, 0x0d, 0x6d, 0x64, 0xa2, 0xc3, 0x00, 0x51, 0x66, 0x26, 0x98,
	0xda, 0x07, 0xa0, 0xf2, 0x0f, 0x51, 0xc7, 0xcd, 0x54, 0x02, 0x59, 0x1a, 0x32, 0xb1, 0x85, 0x78,
	0xf8, 0x8b, 0x66, 0xbc, 0xd6, 0x9e, 0x80, 0x42, 0x92, 0x2e, 0xb9, 0xff, 0x47, 0xc2, 0xab, 0x60,
	0xa9, 0x87, 0x30, 0x71, 0x79, 0xae, 0x39, 0x53, 0x2c, 0xb4, 0xf7, 0xc1, 0xfa, 0x8c, 0xf3, 0xaf,
	0x14, 0xfa, 0x8b, 0x34, 0xb8, 0xc1, 0xb9, 0xac, 0x65, 0x1d, 0xb6, 0xa1, 0x0f, 0xdd, 0x79, 0x85,
	0xda, 0x02, 0x6b, 0x9e, 0xef, 0x58, 0xa8, 0x23, 0xa6, 0x61, 0x2a, 0x87, 0x02, 0xb7, 0xf2, 0x20,
	0x3e, 0x8c, 0xb3, 0xb9, 0x0b, 0x0a, 0x49, 0x92, 0x47, 0x08, 0x67, 0x88, 0xcc, 0xf2, 0x63, 0x46,
	0x9b, 0x90, 0x10, 0xbe, 0x0d, 0x4a, 0x49, 0x38, 0x9f, 0x75, 0x1a, 0xb3, 0x44, 0xde, 0x6b, 0x63,
	0x96, 0xc9, 0xed, 0xb3, 0xb9, 0x8c, 0x3c, 0x42, 0xb8, 0xe3, 0xe0, 0x8e, 0xd0, 0x6c, 0x69, 0x92,
	0xfb, 0x79, 0x68, 0x6f, 0xe1, 0xfb, 0xa1, 0x55, 0xad, 0x83, 0x9b, 0xd3, 0x5c, 0x12, 0x30, 0x31,
	0x30, 0xa6, 0x3a, 0x41, 0xdb, 0x0f, 0x98, 0x5a, 0x03, 0xf9, 0x0b, 0x99, 0x41, 0xd6, 0x2f, 0x2e,
	0x73, 0xf4, 0xf5, 0x44, 0x5a, 0x90, 0xf5, 0xb5, 0x5b, 0x72, 0x2c, 0xc6, 0x2a, 0xc7, 0x23, 0xf3,
	0x63, 0x1a, 0xd4, 0x64, 0xf5, 0x76, 0x29, 0x73, 0x5c, 0xc8, 0xd0, 0xc1, 0x63, 0xe8, 0xed, 0x1e,
	0x43, 0x8b, 0xed, 0xb8, 0x24, 0xc0, 0x6c, 0x3f, 0x60, 0xb2, 0x69, 0x93, 0xa5, 0x49, 0x5f, 0x2c,
	0xcd, 0x5b, 0x60, 0x39, 0xa9, 0xec, 0x62, 0x53, 0x3d, 0x1f, 0x55, 0xae, 0xcb, 0x2b, 0x44, 0x18,
	0x34, 0x33, 0xe3, 0x09, 0x9d, 0xbe, 0x04, 0x19, 0xa1, 0x6b, 0x71, 0xb1, 0xba, 0x50, 0xbb, 0xd6,
	0x30, 0xf4, 0x39, 0x4f, 0x85, 0x1e, 0x86, 0x33, 0x8e, 0x24, 0xe4, 0x35, 0x6f, 0x3e, 0x1b, 0x55,
	0x52, 0x89, 0xeb, 0x8e, 0x3b, 0x0b, 0xaf, 0x3b, 0xfe, 0xa1, 0xd6, 0x41, 0x6e, 0xac, 0x1f, 0x97,
	0x3d, 0x79, 0xa3, 0xc5, 0x26, 0xcd, 0xcc, 0xb2, 0x48, 0xcb, 0x8b, 0x23, 0x91, 0x99, 0x18, 0x89,
	0x8f, 0x17, 0xb3, 0x4a, 0x3e, 0x6d, 0x66, 0x28, 0xbf, 0x32, 0xb5, 0x8f, 0xc0, 0x9d, 0x2b, 0x48,
	0x76, 0x79, 0xfb, 0x37, 0x7e, 0x5a, 0x02, 0x0b, 0x0f, 0xa8, 0xad, 0xfe, 0xac, 0x80, 0xc2, 0xac,
	0x27, 0x64, 0x6b, 0xae, 0x30, 0xb3, 0x2f, 0xc3, 0xd2, 0xbd, 0x7f, 0x41, 0x8a, 0xdb, 0xa1, 0xf1,
	0xcd, 0xaf, 0x2f, 0xbe, 0x4f, 0x6f, 0x6a, 0x6f, 0x4e, 0xbd, 0x7e, 0xec, 0x38, 0x7e, 0x33, 0x29,
	0x77, 0xc0, 0xb7, 0xb7, 0x95, 0x0d, 0xf5, 0x09, 0xc8, 0x4f, 0x5d, 0x3e, 0x6f, 0x5f, 0x1a, 0xc4,
	0x04, 0xa3, 0xf4, 0xde, 0xcb, 0x32, 0x62, 0x95, 0x7c, 0xb0, 0x72, 0xe1, 0x02, 0xd9, 0xbc, 0xdc,
	0xd3, 0x18, 0x5d, 0x7a, 0xe7, 0x65, 0xd0, 0xf1, 0x99, 0x7f, 0x29, 0xa0, 0x3c, 0xbf, 0x01, 0xd4,
	0xdd, 0xab, 0x24, 0x74, 0xe9, 0xcc, 0x95, 0xf6, 0xfe, 0xab, 0x1b, 0x59, 0xd9, 0x4f, 0x78, 0x65,
	0xf7, 0xd4, 0xfb, 0xf3, 0x2a, 0xfb, 0x95, 0x9c, 0xd5, 0xaf, 0x0d, 0x24, 0x3d, 0x8a, 0xbf, 0x3c,
	0x28, 0xf4, 0xd9, 0x81, 0xdc, 0x69, 0x38, 0x3a, 0xcd, 0xf6, 0xb3, 0xd3, 0xb2, 0xf2, 0xfc, 0xb4,
	0xac, 0xfc, 0x7e, 0x5a, 0x56, 0xbe, 0x3b, 0x2b, 0xa7, 0x9e, 0x9f, 0x95, 0x53, 0xbf, 0x9d, 0x95,
	0x53, 0x5f, 0xbc, 0x6b, 0x3b, 0xac, 0x1f, 0x74, 0x75, 0x8b, 0xb8, 0x06, 0x25, 0xa4, 0x4f, 0x1c,
	0x62, 0xc4, 0x7f, 0xa9, 0x8e, 0x1a, 0xc6, 0xf1, 0xf4, 0xf9, 0x43, 0x0f, 0xd1, 0x6e, 0x86, 0xff,
	0xa1, 0xda, 0xfa, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x85, 0x70, 0xd6, 0x86, 0x63, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// SubmitQueryResponse defines a method for submit query responses.
	SubmitQueryResponse(ctx context.Context, in *MsgSubmitQueryResponse, opts ...grpc.CallOption) (*MsgSubmitQueryResponseResponse, error)
	SendQueryBalance(ctx context.Context, in *MsgSendQueryBalance, opts ...grpc.CallOption) (*MsgSendQueryBalanceResponse, error)
	SetIcqParams(ctx context.Context, in *MsgSetIcqParams, opts ...grpc.CallOption) (*MsgSetIcqParamsResponse, error)
	// Estimates swap amount in given out.
	SendEstimateSwapExactAmountOut(ctx context.Context, in *MsgSendEstimateSwapExactAmountOutRequest, opts ...grpc.CallOption) (*MsgSendEstimateSwapExactAmountOutResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SubmitQueryResponse(ctx context.Context, in *MsgSubmitQueryResponse, opts ...grpc.CallOption) (*MsgSubmitQueryResponseResponse, error) {
	out := new(MsgSubmitQueryResponseResponse)
	err := c.cc.Invoke(ctx, "/stayking.interchainquery.v1.Msg/SubmitQueryResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendQueryBalance(ctx context.Context, in *MsgSendQueryBalance, opts ...grpc.CallOption) (*MsgSendQueryBalanceResponse, error) {
	out := new(MsgSendQueryBalanceResponse)
	err := c.cc.Invoke(ctx, "/stayking.interchainquery.v1.Msg/SendQueryBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetIcqParams(ctx context.Context, in *MsgSetIcqParams, opts ...grpc.CallOption) (*MsgSetIcqParamsResponse, error) {
	out := new(MsgSetIcqParamsResponse)
	err := c.cc.Invoke(ctx, "/stayking.interchainquery.v1.Msg/SetIcqParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendEstimateSwapExactAmountOut(ctx context.Context, in *MsgSendEstimateSwapExactAmountOutRequest, opts ...grpc.CallOption) (*MsgSendEstimateSwapExactAmountOutResponse, error) {
	out := new(MsgSendEstimateSwapExactAmountOutResponse)
	err := c.cc.Invoke(ctx, "/stayking.interchainquery.v1.Msg/SendEstimateSwapExactAmountOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SubmitQueryResponse defines a method for submit query responses.
	SubmitQueryResponse(context.Context, *MsgSubmitQueryResponse) (*MsgSubmitQueryResponseResponse, error)
	SendQueryBalance(context.Context, *MsgSendQueryBalance) (*MsgSendQueryBalanceResponse, error)
	SetIcqParams(context.Context, *MsgSetIcqParams) (*MsgSetIcqParamsResponse, error)
	// Estimates swap amount in given out.
	SendEstimateSwapExactAmountOut(context.Context, *MsgSendEstimateSwapExactAmountOutRequest) (*MsgSendEstimateSwapExactAmountOutResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SubmitQueryResponse(ctx context.Context, req *MsgSubmitQueryResponse) (*MsgSubmitQueryResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitQueryResponse not implemented")
}
func (*UnimplementedMsgServer) SendQueryBalance(ctx context.Context, req *MsgSendQueryBalance) (*MsgSendQueryBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendQueryBalance not implemented")
}
func (*UnimplementedMsgServer) SetIcqParams(ctx context.Context, req *MsgSetIcqParams) (*MsgSetIcqParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIcqParams not implemented")
}
func (*UnimplementedMsgServer) SendEstimateSwapExactAmountOut(ctx context.Context, req *MsgSendEstimateSwapExactAmountOutRequest) (*MsgSendEstimateSwapExactAmountOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEstimateSwapExactAmountOut not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SubmitQueryResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitQueryResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitQueryResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stayking.interchainquery.v1.Msg/SubmitQueryResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitQueryResponse(ctx, req.(*MsgSubmitQueryResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendQueryBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendQueryBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendQueryBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stayking.interchainquery.v1.Msg/SendQueryBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendQueryBalance(ctx, req.(*MsgSendQueryBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetIcqParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetIcqParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetIcqParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stayking.interchainquery.v1.Msg/SetIcqParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetIcqParams(ctx, req.(*MsgSetIcqParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendEstimateSwapExactAmountOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendEstimateSwapExactAmountOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendEstimateSwapExactAmountOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stayking.interchainquery.v1.Msg/SendEstimateSwapExactAmountOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendEstimateSwapExactAmountOut(ctx, req.(*MsgSendEstimateSwapExactAmountOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stayking.interchainquery.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitQueryResponse",
			Handler:    _Msg_SubmitQueryResponse_Handler,
		},
		{
			MethodName: "SendQueryBalance",
			Handler:    _Msg_SendQueryBalance_Handler,
		},
		{
			MethodName: "SetIcqParams",
			Handler:    _Msg_SetIcqParams_Handler,
		},
		{
			MethodName: "SendEstimateSwapExactAmountOut",
			Handler:    _Msg_SendEstimateSwapExactAmountOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stayking/interchainquery/v1/messages.proto",
}

func (m *MsgSubmitQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.Height != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x28
	}
	if m.ProofOps != nil {
		{
			size, err := m.ProofOps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitQueryResponseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitQueryResponseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitQueryResponseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendQueryAllBalances) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendQueryAllBalances) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendQueryAllBalances) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendQueryAllBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendQueryAllBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendQueryAllBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendQueryBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendQueryBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendQueryBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendQueryBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendQueryBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendQueryBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetIcqParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetIcqParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetIcqParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceQueryPath) > 0 {
		i -= len(m.PriceQueryPath)
		copy(dAtA[i:], m.PriceQueryPath)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.PriceQueryPath)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PriceQueryTokenOut) > 0 {
		i -= len(m.PriceQueryTokenOut)
		copy(dAtA[i:], m.PriceQueryTokenOut)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.PriceQueryTokenOut)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PriceQueryTokenInDenom) > 0 {
		i -= len(m.PriceQueryTokenInDenom)
		copy(dAtA[i:], m.PriceQueryTokenInDenom)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.PriceQueryTokenInDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PriceQueryRoutesPoolId) > 0 {
		i -= len(m.PriceQueryRoutesPoolId)
		copy(dAtA[i:], m.PriceQueryRoutesPoolId)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.PriceQueryRoutesPoolId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PriceQueryPoolId) > 0 {
		i -= len(m.PriceQueryPoolId)
		copy(dAtA[i:], m.PriceQueryPoolId)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.PriceQueryPoolId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PriceQueryChannelId) > 0 {
		i -= len(m.PriceQueryChannelId)
		copy(dAtA[i:], m.PriceQueryChannelId)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.PriceQueryChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetIcqParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetIcqParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetIcqParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendEstimateSwapExactAmountOutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendEstimateSwapExactAmountOutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendEstimateSwapExactAmountOutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TokenOut) > 0 {
		i -= len(m.TokenOut)
		copy(dAtA[i:], m.TokenOut)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.TokenOut)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.PoolId != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendEstimateSwapExactAmountOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendEstimateSwapExactAmountOutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendEstimateSwapExactAmountOutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSubmitQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.ProofOps != nil {
		l = m.ProofOps.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovMessages(uint64(m.Height))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgSubmitQueryResponseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendQueryAllBalances) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgSendQueryAllBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovMessages(uint64(m.Sequence))
	}
	return n
}

func (m *MsgSendQueryBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgSendQueryBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovMessages(uint64(m.Sequence))
	}
	return n
}

func (m *MsgSetIcqParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.PriceQueryChannelId)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.PriceQueryPoolId)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.PriceQueryRoutesPoolId)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.PriceQueryTokenInDenom)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.PriceQueryTokenOut)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.PriceQueryPath)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgSetIcqParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendEstimateSwapExactAmountOutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovMessages(uint64(m.PoolId))
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	l = len(m.TokenOut)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgSendEstimateSwapExactAmountOutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovMessages(uint64(m.Sequence))
	}
	return n
}

func sovMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSubmitQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofOps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofOps == nil {
				m.ProofOps = &crypto.ProofOps{}
			}
			if err := m.ProofOps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitQueryResponseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitQueryResponseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitQueryResponseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendQueryAllBalances) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendQueryAllBalances: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendQueryAllBalances: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendQueryAllBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendQueryAllBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendQueryAllBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendQueryBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendQueryBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendQueryBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendQueryBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendQueryBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendQueryBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetIcqParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetIcqParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetIcqParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceQueryChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceQueryChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceQueryPoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceQueryPoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceQueryRoutesPoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceQueryRoutesPoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceQueryTokenInDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceQueryTokenInDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceQueryTokenOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceQueryTokenOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceQueryPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceQueryPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetIcqParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetIcqParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetIcqParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendEstimateSwapExactAmountOutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendEstimateSwapExactAmountOutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendEstimateSwapExactAmountOutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, SwapAmountOutRoute{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendEstimateSwapExactAmountOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendEstimateSwapExactAmountOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendEstimateSwapExactAmountOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessages = fmt.Errorf("proto: unexpected end of group")
)
