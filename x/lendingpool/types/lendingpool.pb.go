// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stayking/lendingpool/v1/lendingpool.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FeePool is the global fee pool for distribution.
type Pool struct {
	Id             uint64                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Coins          github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins" yaml:"pool"`
	RedemptionRate github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,3,opt,name=redemption_rate,json=redemptionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"redemption_rate"`
	TotalCoins     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=total_coins,json=totalCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_coins" yaml:"pool"`
	InterestModel  *types1.Any                              `protobuf:"bytes,5,opt,name=interest_model,json=interestModel,proto3" json:"interest_model,omitempty"`
	Denom          string                                   `protobuf:"bytes,6,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b41fc733dd0c43f, []int{0}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

// Params defines the set of params for the distribution module.
type Params struct {
	// protocol tax rate to take from the lending pool depositors
	ProtocolTaxRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=protocol_tax_rate,json=protocolTaxRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"protocol_tax_rate"`
	// expected blocks per year
	BlocksPerYear uint64 `protobuf:"varint,6,opt,name=blocks_per_year,json=blocksPerYear,proto3" json:"blocks_per_year,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b41fc733dd0c43f, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetBlocksPerYear() uint64 {
	if m != nil {
		return m.BlocksPerYear
	}
	return 0
}

// Borrow defines a borrow record
type Loan struct {
	Denom       string                                      `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Borrower    string                                      `protobuf:"bytes,2,opt,name=borrower,proto3" json:"borrower,omitempty"`
	MarkPrice   github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,3,rep,name=mark_price,json=markPrice,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"mark_price"`
	AssetValue  github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,4,rep,name=asset_value,json=assetValue,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"asset_value"`
	BorrowValue github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,5,rep,name=borrow_value,json=borrowValue,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"borrow_value"`
}

func (m *Loan) Reset()         { *m = Loan{} }
func (m *Loan) String() string { return proto.CompactTextString(m) }
func (*Loan) ProtoMessage()    {}
func (*Loan) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b41fc733dd0c43f, []int{2}
}
func (m *Loan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Loan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Loan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Loan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Loan.Merge(m, src)
}
func (m *Loan) XXX_Size() int {
	return m.Size()
}
func (m *Loan) XXX_DiscardUnknown() {
	xxx_messageInfo_Loan.DiscardUnknown(m)
}

var xxx_messageInfo_Loan proto.InternalMessageInfo

func (m *Loan) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Loan) GetBorrower() string {
	if m != nil {
		return m.Borrower
	}
	return ""
}

func (m *Loan) GetMarkPrice() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.MarkPrice
	}
	return nil
}

func (m *Loan) GetAssetValue() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.AssetValue
	}
	return nil
}

func (m *Loan) GetBorrowValue() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.BorrowValue
	}
	return nil
}

func init() {
	proto.RegisterType((*Pool)(nil), "stayking.lendingpool.v1.Pool")
	proto.RegisterType((*Params)(nil), "stayking.lendingpool.v1.Params")
	proto.RegisterType((*Loan)(nil), "stayking.lendingpool.v1.Loan")
}

func init() {
	proto.RegisterFile("stayking/lendingpool/v1/lendingpool.proto", fileDescriptor_7b41fc733dd0c43f)
}

var fileDescriptor_7b41fc733dd0c43f = []byte{
	// 626 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xb1, 0x6b, 0xdb, 0x4e,
	0x14, 0xc7, 0x2d, 0x5b, 0x0e, 0xbf, 0x9c, 0x7f, 0x49, 0xa8, 0x08, 0xd4, 0x09, 0xad, 0x64, 0x3c,
	0x04, 0x97, 0x12, 0x09, 0x3b, 0x5b, 0x28, 0x94, 0xba, 0x59, 0x02, 0x2d, 0x35, 0xa2, 0x14, 0xda,
	0x45, 0x9c, 0xa4, 0xab, 0x72, 0x58, 0xd2, 0x13, 0x77, 0x17, 0x37, 0xa6, 0xff, 0x40, 0xc7, 0x0e,
	0x1d, 0x3a, 0x66, 0x2c, 0x99, 0xf3, 0x47, 0x84, 0x4e, 0xa1, 0x53, 0xe9, 0xe0, 0x14, 0x67, 0xe9,
	0x9c, 0xbf, 0xa0, 0xdc, 0x9d, 0x9c, 0xb8, 0xd0, 0x21, 0x43, 0x3d, 0x59, 0xcf, 0xef, 0xdd, 0xf7,
	0xf3, 0xbe, 0xef, 0x1d, 0x87, 0x1e, 0x70, 0x81, 0xc7, 0x43, 0x9a, 0x27, 0x5e, 0x4a, 0xf2, 0x98,
	0xe6, 0x49, 0x01, 0x90, 0x7a, 0xa3, 0xee, 0x7c, 0xe8, 0x16, 0x0c, 0x04, 0x58, 0x77, 0x67, 0xa5,
	0xee, 0x7c, 0x6e, 0xd4, 0xdd, 0x5c, 0x4f, 0x20, 0x01, 0x55, 0xe3, 0xc9, 0x2f, 0x5d, 0xbe, 0xb9,
	0x91, 0x00, 0x24, 0x29, 0xf1, 0x54, 0x14, 0x1e, 0xbe, 0xf5, 0x70, 0x3e, 0x2e, 0x53, 0x76, 0x04,
	0x3c, 0x03, 0xee, 0x85, 0x98, 0x13, 0x6f, 0xd4, 0x0d, 0x89, 0xc0, 0x5d, 0x2f, 0x02, 0x9a, 0xcf,
	0x8e, 0xea, 0x7c, 0xa0, 0x35, 0x75, 0xa0, 0x53, 0xed, 0x5f, 0x35, 0x64, 0x0e, 0x00, 0x52, 0xeb,
	0x3e, 0xaa, 0xd2, 0xb8, 0x69, 0xb4, 0x8c, 0x8e, 0xd9, 0x5f, 0xb9, 0x9a, 0x38, 0xcb, 0x63, 0x9c,
	0xa5, 0xbb, 0x6d, 0x1a, 0xb7, 0xfd, 0x2a, 0x8d, 0xad, 0x02, 0xd5, 0xa5, 0x20, 0x6f, 0x56, 0x5b,
	0xb5, 0x4e, 0xa3, 0xb7, 0xe1, 0x96, 0x2a, 0x12, 0xe9, 0x96, 0x48, 0xf7, 0x29, 0xd0, 0xbc, 0xff,
	0xf8, 0x6c, 0xe2, 0x54, 0xae, 0x26, 0x4e, 0x43, 0x0b, 0x48, 0x53, 0xed, 0x93, 0x0b, 0xa7, 0x93,
	0x50, 0x71, 0x70, 0x18, 0xba, 0x11, 0x64, 0x65, 0x07, 0xe5, 0xcf, 0x36, 0x8f, 0x87, 0x9e, 0x18,
	0x17, 0x84, 0xab, 0xf3, 0xdc, 0xd7, 0x20, 0x8b, 0xa0, 0x35, 0x46, 0x62, 0x92, 0x15, 0x82, 0x42,
	0x1e, 0x30, 0x2c, 0x48, 0xb3, 0xd6, 0x32, 0x3a, 0xcb, 0xfd, 0x47, 0x12, 0xf0, 0x63, 0xe2, 0x6c,
	0xdd, 0x42, 0x71, 0x8f, 0x44, 0xdf, 0x4e, 0xb7, 0x51, 0xd9, 0xec, 0x1e, 0x89, 0xfc, 0xd5, 0x1b,
	0x51, 0x1f, 0x0b, 0x62, 0xbd, 0x47, 0x0d, 0x01, 0x02, 0xa7, 0x81, 0xb6, 0x67, 0x2e, 0xdc, 0x1e,
	0x52, 0x38, 0xf5, 0x6d, 0xbd, 0x40, 0xab, 0x34, 0x17, 0x84, 0x11, 0x2e, 0x82, 0x0c, 0x62, 0x92,
	0x36, 0xeb, 0x2d, 0xa3, 0xd3, 0xe8, 0xad, 0xbb, 0x7a, 0xd9, 0xee, 0x6c, 0xd9, 0xee, 0x93, 0x7c,
	0xdc, 0xb7, 0xbe, 0x9e, 0x6e, 0xaf, 0xee, 0x97, 0xf5, 0xcf, 0x65, 0xf9, 0xbe, 0xbf, 0x42, 0xe7,
	0x63, 0x6b, 0x1d, 0xd5, 0x63, 0x92, 0x43, 0xd6, 0x5c, 0x92, 0xa3, 0xf2, 0x75, 0xb0, 0x6b, 0x7e,
	0x38, 0x76, 0x2a, 0xed, 0x63, 0x03, 0x2d, 0x0d, 0x30, 0xc3, 0x19, 0xb7, 0x0e, 0xd0, 0x1d, 0xa5,
	0x1c, 0x41, 0x1a, 0x08, 0x7c, 0xa4, 0xa7, 0x6b, 0xfc, 0x83, 0xe9, 0xae, 0xcd, 0x64, 0x5f, 0xe2,
	0x23, 0x35, 0xde, 0x2d, 0xb4, 0x16, 0xa6, 0x10, 0x0d, 0x79, 0x50, 0x10, 0x16, 0x8c, 0x09, 0x66,
	0xaa, 0x35, 0xd3, 0x5f, 0xd1, 0x7f, 0x0f, 0x08, 0x7b, 0x4d, 0x30, 0xdb, 0x35, 0x3f, 0xcb, 0x16,
	0x3f, 0xd5, 0x90, 0xf9, 0x0c, 0x70, 0x7e, 0xe3, 0xc3, 0x98, 0xf3, 0x61, 0x6d, 0xa2, 0xff, 0x42,
	0x60, 0x0c, 0xde, 0x11, 0xd6, 0xac, 0xaa, 0xc4, 0x75, 0x6c, 0x15, 0x08, 0x65, 0x98, 0x0d, 0x83,
	0x82, 0xd1, 0x48, 0xde, 0x14, 0xb9, 0xc6, 0x7b, 0x7f, 0x5d, 0xe3, 0x1e, 0x89, 0xd4, 0x26, 0x77,
	0xa4, 0xd3, 0x93, 0x0b, 0xe7, 0xe1, 0xed, 0x9c, 0xea, 0xed, 0x2d, 0x4b, 0xc8, 0x40, 0x32, 0x2c,
	0x86, 0x1a, 0x98, 0x73, 0x22, 0x82, 0x11, 0x4e, 0x0f, 0x49, 0x79, 0x73, 0x16, 0x80, 0x44, 0x8a,
	0xf2, 0x4a, 0x42, 0x2c, 0x81, 0xfe, 0xd7, 0x8e, 0x4b, 0x68, 0x7d, 0x51, 0xd0, 0x86, 0xc6, 0x28,
	0x6a, 0x7f, 0xf0, 0x65, 0x6a, 0x1b, 0x67, 0x53, 0xdb, 0x38, 0x9f, 0xda, 0xc6, 0xcf, 0xa9, 0x6d,
	0x7c, 0xbc, 0xb4, 0x2b, 0xe7, 0x97, 0x76, 0xe5, 0xfb, 0xa5, 0x5d, 0x79, 0xd3, 0x9b, 0xd3, 0xe5,
	0x00, 0x07, 0x40, 0xc1, 0xbb, 0x7e, 0x05, 0x47, 0x3d, 0xef, 0xe8, 0x8f, 0xa7, 0x50, 0x71, 0xc2,
	0x25, 0x75, 0x4f, 0x76, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x56, 0x55, 0x79, 0x59, 0x2f, 0x05,
	0x00, 0x00,
}

func (this *Pool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pool)
	if !ok {
		that2, ok := that.(Pool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Coins) != len(that1.Coins) {
		return false
	}
	for i := range this.Coins {
		if !this.Coins[i].Equal(&that1.Coins[i]) {
			return false
		}
	}
	if !this.RedemptionRate.Equal(that1.RedemptionRate) {
		return false
	}
	if len(this.TotalCoins) != len(that1.TotalCoins) {
		return false
	}
	for i := range this.TotalCoins {
		if !this.TotalCoins[i].Equal(&that1.TotalCoins[i]) {
			return false
		}
	}
	if !this.InterestModel.Equal(that1.InterestModel) {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolTaxRate.Equal(that1.ProtocolTaxRate) {
		return false
	}
	if this.BlocksPerYear != that1.BlocksPerYear {
		return false
	}
	return true
}
func (this *Loan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Loan)
	if !ok {
		that2, ok := that.(Loan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if this.Borrower != that1.Borrower {
		return false
	}
	if len(this.MarkPrice) != len(that1.MarkPrice) {
		return false
	}
	for i := range this.MarkPrice {
		if !this.MarkPrice[i].Equal(&that1.MarkPrice[i]) {
			return false
		}
	}
	if len(this.AssetValue) != len(that1.AssetValue) {
		return false
	}
	for i := range this.AssetValue {
		if !this.AssetValue[i].Equal(&that1.AssetValue[i]) {
			return false
		}
	}
	if len(this.BorrowValue) != len(that1.BorrowValue) {
		return false
	}
	for i := range this.BorrowValue {
		if !this.BorrowValue[i].Equal(&that1.BorrowValue[i]) {
			return false
		}
	}
	return true
}
func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLendingpool(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x32
	}
	if m.InterestModel != nil {
		{
			size, err := m.InterestModel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLendingpool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TotalCoins) > 0 {
		for iNdEx := len(m.TotalCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLendingpool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.RedemptionRate.Size()
		i -= size
		if _, err := m.RedemptionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLendingpool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLendingpool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintLendingpool(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlocksPerYear != 0 {
		i = encodeVarintLendingpool(dAtA, i, uint64(m.BlocksPerYear))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.ProtocolTaxRate.Size()
		i -= size
		if _, err := m.ProtocolTaxRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLendingpool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Loan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Loan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Loan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BorrowValue) > 0 {
		for iNdEx := len(m.BorrowValue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BorrowValue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLendingpool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AssetValue) > 0 {
		for iNdEx := len(m.AssetValue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetValue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLendingpool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MarkPrice) > 0 {
		for iNdEx := len(m.MarkPrice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MarkPrice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLendingpool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Borrower) > 0 {
		i -= len(m.Borrower)
		copy(dAtA[i:], m.Borrower)
		i = encodeVarintLendingpool(dAtA, i, uint64(len(m.Borrower)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLendingpool(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLendingpool(dAtA []byte, offset int, v uint64) int {
	offset -= sovLendingpool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLendingpool(uint64(m.Id))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovLendingpool(uint64(l))
		}
	}
	l = m.RedemptionRate.Size()
	n += 1 + l + sovLendingpool(uint64(l))
	if len(m.TotalCoins) > 0 {
		for _, e := range m.TotalCoins {
			l = e.Size()
			n += 1 + l + sovLendingpool(uint64(l))
		}
	}
	if m.InterestModel != nil {
		l = m.InterestModel.Size()
		n += 1 + l + sovLendingpool(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLendingpool(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProtocolTaxRate.Size()
	n += 1 + l + sovLendingpool(uint64(l))
	if m.BlocksPerYear != 0 {
		n += 1 + sovLendingpool(uint64(m.BlocksPerYear))
	}
	return n
}

func (m *Loan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLendingpool(uint64(l))
	}
	l = len(m.Borrower)
	if l > 0 {
		n += 1 + l + sovLendingpool(uint64(l))
	}
	if len(m.MarkPrice) > 0 {
		for _, e := range m.MarkPrice {
			l = e.Size()
			n += 1 + l + sovLendingpool(uint64(l))
		}
	}
	if len(m.AssetValue) > 0 {
		for _, e := range m.AssetValue {
			l = e.Size()
			n += 1 + l + sovLendingpool(uint64(l))
		}
	}
	if len(m.BorrowValue) > 0 {
		for _, e := range m.BorrowValue {
			l = e.Size()
			n += 1 + l + sovLendingpool(uint64(l))
		}
	}
	return n
}

func sovLendingpool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLendingpool(x uint64) (n int) {
	return sovLendingpool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLendingpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLendingpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLendingpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RedemptionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalCoins = append(m.TotalCoins, types.Coin{})
			if err := m.TotalCoins[len(m.TotalCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestModel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InterestModel == nil {
				m.InterestModel = &types1.Any{}
			}
			if err := m.InterestModel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLendingpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLendingpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLendingpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLendingpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLendingpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolTaxRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLendingpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLendingpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolTaxRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksPerYear", wireType)
			}
			m.BlocksPerYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksPerYear |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLendingpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLendingpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Loan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLendingpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLendingpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLendingpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLendingpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLendingpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Borrower = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarkPrice = append(m.MarkPrice, types.DecCoin{})
			if err := m.MarkPrice[len(m.MarkPrice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetValue = append(m.AssetValue, types.DecCoin{})
			if err := m.AssetValue[len(m.AssetValue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorrowValue = append(m.BorrowValue, types.DecCoin{})
			if err := m.BorrowValue[len(m.BorrowValue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLendingpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLendingpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLendingpool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLendingpool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLendingpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLendingpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLendingpool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLendingpool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLendingpool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLendingpool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLendingpool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLendingpool = fmt.Errorf("proto: unexpected end of group")
)
