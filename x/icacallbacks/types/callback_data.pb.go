// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/icacallbacks/callback_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CallbackData struct {
	CallbackKey  string `protobuf:"bytes,1,opt,name=callback_key,json=callbackKey,proto3" json:"callback_key,omitempty"`
	PortId       string `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId    string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Sequence     uint64 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CallbackId   string `protobuf:"bytes,5,opt,name=callback_id,json=callbackId,proto3" json:"callback_id,omitempty"`
	CallbackArgs []byte `protobuf:"bytes,6,opt,name=callback_args,json=callbackArgs,proto3" json:"callback_args,omitempty"`
}

func (m *CallbackData) Reset()         { *m = CallbackData{} }
func (m *CallbackData) String() string { return proto.CompactTextString(m) }
func (*CallbackData) ProtoMessage()    {}
func (*CallbackData) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b6f19ce856679b, []int{0}
}
func (m *CallbackData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallbackData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallbackData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallbackData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallbackData.Merge(m, src)
}
func (m *CallbackData) XXX_Size() int {
	return m.Size()
}
func (m *CallbackData) XXX_DiscardUnknown() {
	xxx_messageInfo_CallbackData.DiscardUnknown(m)
}

var xxx_messageInfo_CallbackData proto.InternalMessageInfo

func (m *CallbackData) GetCallbackKey() string {
	if m != nil {
		return m.CallbackKey
	}
	return ""
}

func (m *CallbackData) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *CallbackData) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *CallbackData) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *CallbackData) GetCallbackId() string {
	if m != nil {
		return m.CallbackId
	}
	return ""
}

func (m *CallbackData) GetCallbackArgs() []byte {
	if m != nil {
		return m.CallbackArgs
	}
	return nil
}

func init() {
	proto.RegisterType((*CallbackData)(nil), "stride.icacallbacks.CallbackData")
}

func init() {
	proto.RegisterFile("stride/icacallbacks/callback_data.proto", fileDescriptor_19b6f19ce856679b)
}

var fileDescriptor_19b6f19ce856679b = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xbd, 0x4e, 0xb5, 0x30,
	0x18, 0xc7, 0xe9, 0xfb, 0x1e, 0xd1, 0x53, 0x71, 0xa9, 0x83, 0xc4, 0xc4, 0x8a, 0x3a, 0xc8, 0x04,
	0x26, 0x5e, 0x81, 0x1f, 0x0b, 0xba, 0x31, 0xba, 0x9c, 0x3c, 0xb4, 0x0d, 0x34, 0x20, 0x45, 0xda,
	0x93, 0xc8, 0x5d, 0x78, 0x59, 0x26, 0x2e, 0x67, 0x74, 0x34, 0x70, 0x23, 0x06, 0x3c, 0x34, 0xba,
	0xf5, 0xff, 0xf1, 0x4b, 0x9f, 0xfc, 0xf1, 0xa5, 0x36, 0xad, 0xe4, 0x22, 0x96, 0x0c, 0x18, 0x54,
	0x55, 0x06, 0xac, 0xd4, 0xf1, 0xfc, 0x5a, 0x71, 0x30, 0x10, 0x35, 0xad, 0x32, 0x8a, 0x1c, 0xfe,
	0x14, 0xa3, 0xdf, 0xc5, 0xf3, 0x0f, 0x84, 0xbd, 0xbb, 0xad, 0xba, 0x07, 0x03, 0xe4, 0x0c, 0x7b,
	0x16, 0x2e, 0x45, 0xe7, 0xa3, 0x00, 0x85, 0xcb, 0x74, 0x7f, 0xf6, 0x1e, 0x45, 0x47, 0x8e, 0xf0,
	0x6e, 0xa3, 0x5a, 0xb3, 0x92, 0xdc, 0xff, 0x37, 0xa5, 0xee, 0x28, 0x13, 0x4e, 0x4e, 0x30, 0x66,
	0x05, 0xd4, 0xb5, 0xa8, 0xc6, 0xec, 0xff, 0x94, 0x2d, 0xb7, 0x4e, 0xc2, 0xc9, 0x31, 0xde, 0xd3,
	0xe2, 0x65, 0x2d, 0x6a, 0x26, 0xfc, 0x45, 0x80, 0xc2, 0x45, 0x6a, 0x35, 0x39, 0xc5, 0xf6, 0x8b,
	0x91, 0xdd, 0x99, 0x58, 0x3c, 0x5b, 0x09, 0x27, 0x17, 0xf8, 0xc0, 0x16, 0xa0, 0xcd, 0xb5, 0xef,
	0x06, 0x28, 0xf4, 0x52, 0x7b, 0xec, 0x4d, 0x9b, 0xeb, 0xdb, 0x87, 0xf7, 0x9e, 0xa2, 0x4d, 0x4f,
	0xd1, 0x57, 0x4f, 0xd1, 0xdb, 0x40, 0x9d, 0xcd, 0x40, 0x9d, 0xcf, 0x81, 0x3a, 0x4f, 0x57, 0xb9,
	0x34, 0xc5, 0x3a, 0x8b, 0x98, 0x7a, 0x8e, 0xb5, 0x52, 0x85, 0x92, 0x2a, 0xd6, 0x06, 0xba, 0x52,
	0xd6, 0x79, 0xfc, 0xfa, 0x77, 0x3c, 0xd3, 0x35, 0x42, 0x67, 0xee, 0xb4, 0xda, 0xf5, 0x77, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x24, 0x2a, 0x0f, 0xa0, 0x60, 0x01, 0x00, 0x00,
}

func (m *CallbackData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallbackData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallbackData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CallbackArgs) > 0 {
		i -= len(m.CallbackArgs)
		copy(dAtA[i:], m.CallbackArgs)
		i = encodeVarintCallbackData(dAtA, i, uint64(len(m.CallbackArgs)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CallbackId) > 0 {
		i -= len(m.CallbackId)
		copy(dAtA[i:], m.CallbackId)
		i = encodeVarintCallbackData(dAtA, i, uint64(len(m.CallbackId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Sequence != 0 {
		i = encodeVarintCallbackData(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintCallbackData(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintCallbackData(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CallbackKey) > 0 {
		i -= len(m.CallbackKey)
		copy(dAtA[i:], m.CallbackKey)
		i = encodeVarintCallbackData(dAtA, i, uint64(len(m.CallbackKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCallbackData(dAtA []byte, offset int, v uint64) int {
	offset -= sovCallbackData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CallbackData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CallbackKey)
	if l > 0 {
		n += 1 + l + sovCallbackData(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovCallbackData(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovCallbackData(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovCallbackData(uint64(m.Sequence))
	}
	l = len(m.CallbackId)
	if l > 0 {
		n += 1 + l + sovCallbackData(uint64(l))
	}
	l = len(m.CallbackArgs)
	if l > 0 {
		n += 1 + l + sovCallbackData(uint64(l))
	}
	return n
}

func sovCallbackData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCallbackData(x uint64) (n int) {
	return sovCallbackData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CallbackData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallbackData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallbackData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallbackData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallbackKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbackData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallbackData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallbackData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallbackKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbackData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallbackData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallbackData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbackData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallbackData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallbackData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbackData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallbackId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbackData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallbackData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallbackData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallbackId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallbackArgs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbackData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCallbackData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCallbackData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallbackArgs = append(m.CallbackArgs[:0], dAtA[iNdEx:postIndex]...)
			if m.CallbackArgs == nil {
				m.CallbackArgs = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCallbackData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallbackData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCallbackData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCallbackData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCallbackData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCallbackData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCallbackData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCallbackData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCallbackData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCallbackData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCallbackData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCallbackData = fmt.Errorf("proto: unexpected end of group")
)
