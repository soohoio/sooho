// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgRegisterHostZone } from "./types/stayking/stakeibc/tx";
import { MsgDeleteValidator } from "./types/stayking/stakeibc/tx";
import { MsgLiquidStake } from "./types/stayking/stakeibc/tx";
import { MsgChangeValidatorWeight } from "./types/stayking/stakeibc/tx";
import { MsgRebalanceValidators } from "./types/stayking/stakeibc/tx";
import { MsgAddValidator } from "./types/stayking/stakeibc/tx";
import { MsgRedeemStake } from "./types/stayking/stakeibc/tx";
import { MsgRestoreInterchainAccount } from "./types/stayking/stakeibc/tx";
import { MsgClearBalance } from "./types/stayking/stakeibc/tx";
import { MsgClaimUndelegatedTokens } from "./types/stayking/stakeibc/tx";
import { MsgUpdateValidatorSharesExchRate } from "./types/stayking/stakeibc/tx";


export { MsgRegisterHostZone, MsgDeleteValidator, MsgLiquidStake, MsgChangeValidatorWeight, MsgRebalanceValidators, MsgAddValidator, MsgRedeemStake, MsgRestoreInterchainAccount, MsgClearBalance, MsgClaimUndelegatedTokens, MsgUpdateValidatorSharesExchRate };

type sendMsgRegisterHostZoneParams = {
  value: MsgRegisterHostZone,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteValidatorParams = {
  value: MsgDeleteValidator,
  fee?: StdFee,
  memo?: string
};

type sendMsgLiquidStakeParams = {
  value: MsgLiquidStake,
  fee?: StdFee,
  memo?: string
};

type sendMsgChangeValidatorWeightParams = {
  value: MsgChangeValidatorWeight,
  fee?: StdFee,
  memo?: string
};

type sendMsgRebalanceValidatorsParams = {
  value: MsgRebalanceValidators,
  fee?: StdFee,
  memo?: string
};

type sendMsgAddValidatorParams = {
  value: MsgAddValidator,
  fee?: StdFee,
  memo?: string
};

type sendMsgRedeemStakeParams = {
  value: MsgRedeemStake,
  fee?: StdFee,
  memo?: string
};

type sendMsgRestoreInterchainAccountParams = {
  value: MsgRestoreInterchainAccount,
  fee?: StdFee,
  memo?: string
};

type sendMsgClearBalanceParams = {
  value: MsgClearBalance,
  fee?: StdFee,
  memo?: string
};

type sendMsgClaimUndelegatedTokensParams = {
  value: MsgClaimUndelegatedTokens,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateValidatorSharesExchRateParams = {
  value: MsgUpdateValidatorSharesExchRate,
  fee?: StdFee,
  memo?: string
};


type msgRegisterHostZoneParams = {
  value: MsgRegisterHostZone,
};

type msgDeleteValidatorParams = {
  value: MsgDeleteValidator,
};

type msgLiquidStakeParams = {
  value: MsgLiquidStake,
};

type msgChangeValidatorWeightParams = {
  value: MsgChangeValidatorWeight,
};

type msgRebalanceValidatorsParams = {
  value: MsgRebalanceValidators,
};

type msgAddValidatorParams = {
  value: MsgAddValidator,
};

type msgRedeemStakeParams = {
  value: MsgRedeemStake,
};

type msgRestoreInterchainAccountParams = {
  value: MsgRestoreInterchainAccount,
};

type msgClearBalanceParams = {
  value: MsgClearBalance,
};

type msgClaimUndelegatedTokensParams = {
  value: MsgClaimUndelegatedTokens,
};

type msgUpdateValidatorSharesExchRateParams = {
  value: MsgUpdateValidatorSharesExchRate,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgRegisterHostZone({ value, fee, memo }: sendMsgRegisterHostZoneParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRegisterHostZone: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRegisterHostZone({ value: MsgRegisterHostZone.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRegisterHostZone: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteValidator({ value, fee, memo }: sendMsgDeleteValidatorParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteValidator: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDeleteValidator({ value: MsgDeleteValidator.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteValidator: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgLiquidStake({ value, fee, memo }: sendMsgLiquidStakeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgLiquidStake: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgLiquidStake({ value: MsgLiquidStake.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgLiquidStake: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgChangeValidatorWeight({ value, fee, memo }: sendMsgChangeValidatorWeightParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgChangeValidatorWeight: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgChangeValidatorWeight({ value: MsgChangeValidatorWeight.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgChangeValidatorWeight: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRebalanceValidators({ value, fee, memo }: sendMsgRebalanceValidatorsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRebalanceValidators: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRebalanceValidators({ value: MsgRebalanceValidators.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRebalanceValidators: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAddValidator({ value, fee, memo }: sendMsgAddValidatorParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAddValidator: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgAddValidator({ value: MsgAddValidator.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAddValidator: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRedeemStake({ value, fee, memo }: sendMsgRedeemStakeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRedeemStake: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRedeemStake({ value: MsgRedeemStake.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRedeemStake: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRestoreInterchainAccount({ value, fee, memo }: sendMsgRestoreInterchainAccountParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRestoreInterchainAccount: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRestoreInterchainAccount({ value: MsgRestoreInterchainAccount.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRestoreInterchainAccount: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgClearBalance({ value, fee, memo }: sendMsgClearBalanceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgClearBalance: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgClearBalance({ value: MsgClearBalance.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgClearBalance: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgClaimUndelegatedTokens({ value, fee, memo }: sendMsgClaimUndelegatedTokensParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgClaimUndelegatedTokens: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgClaimUndelegatedTokens({ value: MsgClaimUndelegatedTokens.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgClaimUndelegatedTokens: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateValidatorSharesExchRate({ value, fee, memo }: sendMsgUpdateValidatorSharesExchRateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateValidatorSharesExchRate: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateValidatorSharesExchRate({ value: MsgUpdateValidatorSharesExchRate.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateValidatorSharesExchRate: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgRegisterHostZone({ value }: msgRegisterHostZoneParams): EncodeObject {
			try {
				return { typeUrl: "/stayking.stakeibc.MsgRegisterHostZone", value: MsgRegisterHostZone.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRegisterHostZone: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteValidator({ value }: msgDeleteValidatorParams): EncodeObject {
			try {
				return { typeUrl: "/stayking.stakeibc.MsgDeleteValidator", value: MsgDeleteValidator.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteValidator: Could not create message: ' + e.message)
			}
		},
		
		msgLiquidStake({ value }: msgLiquidStakeParams): EncodeObject {
			try {
				return { typeUrl: "/stayking.stakeibc.MsgLiquidStake", value: MsgLiquidStake.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgLiquidStake: Could not create message: ' + e.message)
			}
		},
		
		msgChangeValidatorWeight({ value }: msgChangeValidatorWeightParams): EncodeObject {
			try {
				return { typeUrl: "/stayking.stakeibc.MsgChangeValidatorWeight", value: MsgChangeValidatorWeight.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgChangeValidatorWeight: Could not create message: ' + e.message)
			}
		},
		
		msgRebalanceValidators({ value }: msgRebalanceValidatorsParams): EncodeObject {
			try {
				return { typeUrl: "/stayking.stakeibc.MsgRebalanceValidators", value: MsgRebalanceValidators.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRebalanceValidators: Could not create message: ' + e.message)
			}
		},
		
		msgAddValidator({ value }: msgAddValidatorParams): EncodeObject {
			try {
				return { typeUrl: "/stayking.stakeibc.MsgAddValidator", value: MsgAddValidator.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAddValidator: Could not create message: ' + e.message)
			}
		},
		
		msgRedeemStake({ value }: msgRedeemStakeParams): EncodeObject {
			try {
				return { typeUrl: "/stayking.stakeibc.MsgRedeemStake", value: MsgRedeemStake.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRedeemStake: Could not create message: ' + e.message)
			}
		},
		
		msgRestoreInterchainAccount({ value }: msgRestoreInterchainAccountParams): EncodeObject {
			try {
				return { typeUrl: "/stayking.stakeibc.MsgRestoreInterchainAccount", value: MsgRestoreInterchainAccount.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRestoreInterchainAccount: Could not create message: ' + e.message)
			}
		},
		
		msgClearBalance({ value }: msgClearBalanceParams): EncodeObject {
			try {
				return { typeUrl: "/stayking.stakeibc.MsgClearBalance", value: MsgClearBalance.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgClearBalance: Could not create message: ' + e.message)
			}
		},
		
		msgClaimUndelegatedTokens({ value }: msgClaimUndelegatedTokensParams): EncodeObject {
			try {
				return { typeUrl: "/stayking.stakeibc.MsgClaimUndelegatedTokens", value: MsgClaimUndelegatedTokens.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgClaimUndelegatedTokens: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateValidatorSharesExchRate({ value }: msgUpdateValidatorSharesExchRateParams): EncodeObject {
			try {
				return { typeUrl: "/stayking.stakeibc.MsgUpdateValidatorSharesExchRate", value: MsgUpdateValidatorSharesExchRate.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateValidatorSharesExchRate: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			StaykingStakeibc: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;